min_version = "2025.7.7"

[env]
NODE_ENV = "{{ env.NODE_ENV | default(value='development') }}"

# Use the project name derived from the current directory
PROJECT_NAME = "{{ config_root | basename }}"

[hooks]
enter = 'mise i -q'
postinstall = 'npx simple-git-hooks'

[settings]
# This must be enabled to make the hooks work
experimental = true

[tools] # Use "mise i" to install & use "mise use" to add tools
actionlint = "latest"
node = "24.5.0"

"npm:@antfu/ni" = "latest"

[tasks.install]
description = 'Install the project dependencies'
alias = 'i'
run = 'npm install'

[tasks.check]
description = "Linter for GithubAction files"
run = 'actionlint && npm run check'

[tasks.maintenance]
description = 'Maintenance project'
run = 'npm run maintenance && mise uninstall --all'

[tasks.bench-node-server]
description = 'Bench node server'
run = 'node example/sample-node-server.js & sleep 2 ; echo \"Run bench!!\" & npx autocannon -c 100 -d 40 -t 10 --renderStatusCodes http://127.0.0.1:3000 && killall node'

[tasks.bench-node-server-wih-metrics]
description = 'Bench node server with metrics'
run = 'node example/sample-node-server.js -m & sleep 2 ; echo \"Run bench!!\" & npx autocannon -c 100 -d 40 -t 10 --renderStatusCodes http://127.0.0.1:3000 && killall node'

[tasks.bench-node-server-cluster]
description = 'Bench node server'
run = 'node example/sample-node-server-cluster.js & sleep 2 ; echo \"Run bench!!\" & npx autocannon -c 100 -d 40 -t 10 --renderStatusCodes http://127.0.0.1:3000 && killall node'

[tasks.bench-node-server-cluster-wih-metrics]
description = 'Bench node server with metrics'
run = 'node example/sample-node-server-cluster.js -m & sleep 2 ; echo \"Run bench!!\" & npx autocannon -c 100 -d 40 -t 10 --renderStatusCodes http://127.0.0.1:3000 && killall node'

[tasks.bench-koa]
description = 'Bench Koa server'
run = 'node example/sample-koa.js & sleep 2 ; echo \"Run bench!!\" & npx autocannon -c 100 -d 40 -t 10 --renderStatusCodes http://127.0.0.1:3000 && killall node'

[tasks.bench-koa-with-metrics]
description = 'Bench Koa server with metrics'
run = 'node example/sample-koa.js -m & sleep 2 ; echo \"Run bench!!\" & npx autocannon -c 100 -d 40 -t 10 --renderStatusCodes http://127.0.0.1:3000 && killall node'

[tasks.bench-express]
description = 'Bench express server'
run = 'node example/sample-express.js & sleep 2 ; echo \"Run bench!!\" & npx autocannon -c 100 -d 40 -t 10 --renderStatusCodes http://127.0.0.1:3000 && killall node'

[tasks.bench-express-with-metrics]
description = 'Bench express server with metrics'
run = 'node example/sample-express.js -m & sleep 2 ; echo \"Run bench!!\" & npx autocannon -c 100 -d 40 -t 10 --renderStatusCodes http://127.0.0.1:3000 && killall node'

[tasks.bench-hono]
description = 'Bench hono server'
run = 'node example/sample-hono.js & sleep 2 ; echo \"Run bench!!\" & npx autocannon -c 100 -d 40 -t 10 --renderStatusCodes http://127.0.0.1:3000 && killall node'

[tasks.bench-hono-with-metrics]
description = 'Bench hono server with metrics'
run = 'node example/sample-hono.js -m & sleep 2 ; echo \"Run bench!!\" & npx autocannon -c 100 -d 40 -t 10 --renderStatusCodes http://127.0.0.1:3000 && killall node'

[tasks.bench-fastify]
description = 'Bench Fastify server'
run = 'node example/sample-fastify.js & sleep 2 ; echo \"Run bench!!\" & npx autocannon -c 100 -d 40 -t 10 --renderStatusCodes http://127.0.0.1:3000 && killall node'

[tasks.bench-fastify-with-metrics]
description = 'Bench Fastify server with metrics'
run = 'node example/sample-fastify.js -m & sleep 2 ; echo \"Run bench!!\" & npx autocannon -c 100 -d 40 -t 10 --renderStatusCodes http://127.0.0.1:3000 && killall node'

[tasks.docker-compose-up]
description = 'Docker compose UP && run app sample'
run = 'docker compose -f compose.yml up -d & sleep 2 ; echo \"Run App!!\" & node -r ./bin/metrics.js example/sample.js'

[tasks.docker-compose-down]
description = 'Docker compose DOWN & Clean'
run = 'docker compose -f compose.yml down --rmi local --volumes --remove-orphans'

[tasks.docker-builder-prune]
description = 'Docker prune'
run = 'docker builder prune -a && docker image prune && docker network prune'

[tasks.info]
description = "Print project information"
run = '''
echo "Project: $PROJECT_NAME"
'''
